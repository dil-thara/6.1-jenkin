pipeline {
    agent any

    environment {
        EMAIL_RECIPIENT = 'diltharanethmini@gmail.com'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    echo 'Building the project using Maven...'
                    // Example: sh 'mvn clean package'
                }
            }
        }

        stage('Unit and Integration Tests') {
            steps {
                script {
                    echo 'Running unit and integration tests with JUnit...'
                    // Example: sh 'mvn test'
                }
            }
        }

        stage('Code Analysis') {
            steps {
                script {
                    echo 'Analyzing the code using SonarQube...'
                    // Example: sh 'sonar-scanner'
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    echo 'Running security scan using OWASP Dependency-Check...'
                    // Example: sh 'dependency-check.sh --project example --scan ./'
                }
            }
        }

        stage('Deploy to Staging') {
            steps {
                script {
                    echo 'Deploying to staging server...'
                    // Example: sh 'scp target/*.war user@staging-server:/path/to/app'
                }
            }
        }

        stage('Integration Tests on Staging') {
            steps {
                script {
                    echo 'Running integration tests on staging server...'
                    // Example: sh 'curl -s http://staging-server/healthcheck'
                }
            }
        }

        stage('Deploy to Production') {
            steps {
                script {
                    echo 'Deploying to production server...'
                    // Example: sh 'scp target/*.war user@production-server:/path/to/app'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
            script {
                emailext (
                    subject: "Build Successful: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "Good news! The build ${env.JOB_NAME} #${env.BUILD_NUMBER} has completed successfully.",
                    to: "${EMAIL_RECIPIENT}"
                )
            }
        }

        failure {
            echo 'Pipeline failed!'
            script {
                emailext (
                    subject: "Build Failed: ${env.JOB_NAME} #${env.BUILD_NUMBER}",
                    body: "The build ${env.JOB_NAME} #${env.BUILD_NUMBER} has failed. Please check the logs.",
                    recipientProviders: [[$class: 'DevelopersRecipientProvider']],
                    attachLog: true,
                    to: "${EMAIL_RECIPIENT}"
                )
            }
        }

        always {
            echo 'Sending notification email...'
            script {
                emailext (
                    subject: "Build ${currentBuild.fullDisplayName}: ${currentBuild.currentResult}",
                    body: """Build Details:
                            - Job Name: ${env.JOB_NAME}
                            - Build Number: ${env.BUILD_NUMBER}
                            - Status: ${currentBuild.currentResult}
                            - Duration: ${currentBuild.durationString}
                            """,
                    to: "${EMAIL_RECIPIENT}",
                    attachLog: true
                )
            }
        }
    }
}
